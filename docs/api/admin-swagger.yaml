openapi: 3.0.3
info:
  title: Engage Service Admin API
  description: Administrative API for managing brands, users, and system operations
  version: 1.0.0
  contact:
    name: API Support
    email: support@engage-service.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: http://localhost:3000
    description: Development server - Admin Portal
  - url: https://admin.engage-service.com
    description: Production server - Admin Portal
paths:
  /api/auth/register:
    post:
      tags:
        - Authentication
      summary: Create register
      description: null
      operationId: postAuthRegister
      parameters: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '201':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimit'
        '500':
          $ref: '#/components/responses/Error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthregisterSchema'
  /api/auth/login:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Register a new user
      operationId: postAuthLogin
      parameters: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '201':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimit'
        '500':
          $ref: '#/components/responses/Error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthloginSchema'
  /api/auth/refresh:
    post:
      tags:
        - Authentication
      summary: User login
      description: User login
      operationId: postAuthRefresh
      parameters: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '201':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimit'
        '500':
          $ref: '#/components/responses/Error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthrefreshTokenSchema'
  /api/auth/logout:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      description: Refresh access token
      operationId: postAuthLogout
      parameters: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '201':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimit'
        '500':
          $ref: '#/components/responses/Error'
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthlogoutSchema'
  /api/auth/forgot-password:
    post:
      tags:
        - Authentication
      summary: User logout
      description: User logout
      operationId: postAuthForgot-password
      parameters: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '201':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimit'
        '500':
          $ref: '#/components/responses/Error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthforgotPasswordSchema'
  /api/auth/reset-password:
    post:
      tags:
        - Authentication
      summary: Request password reset
      description: Request password reset
      operationId: postAuthReset-password
      parameters: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '201':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimit'
        '500':
          $ref: '#/components/responses/Error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthresetPasswordSchema'
  /api/auth/change-password:
    post:
      tags:
        - Authentication
      summary: Reset password with token
      description: Reset password with token
      operationId: postAuthChange-password
      parameters: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '201':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimit'
        '500':
          $ref: '#/components/responses/Error'
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthchangePasswordSchema'
  /api/auth/profile:
    get:
      tags:
        - Authentication
      summary: Change user password
      description: Change user password
      operationId: getAuthProfile
      parameters: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimit'
        '500':
          $ref: '#/components/responses/Error'
      security:
        - BearerAuth: []
    put:
      tags:
        - Authentication
      summary: Get current user profile
      description: Get current user profile
      operationId: putAuthProfile
      parameters: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimit'
        '500':
          $ref: '#/components/responses/Error'
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthupdateProfileSchema'
  /api/auth/status:
    get:
      tags:
        - Authentication
      summary: Update user profile
      description: Update user profile
      operationId: getAuthStatus
      parameters: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimit'
        '500':
          $ref: '#/components/responses/Error'
      security:
        - BearerAuth: []
  /api/auth/validate-token:
    post:
      tags:
        - Authentication
      summary: Get authentication status
      description: Get authentication status
      operationId: postAuthValidate-token
      parameters: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '201':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimit'
        '500':
          $ref: '#/components/responses/Error'
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
  /api/admin/dashboard:
    get:
      tags:
        - Admin Portal
      summary: Get system dashboard overview
      description: Get system dashboard overview
      operationId: getAdminPortalDashboard
      parameters: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimit'
        '500':
          $ref: '#/components/responses/Error'
      security:
        - BearerAuth: []
  /api/admin/analytics:
    get:
      tags:
        - Admin Portal
      summary: Get system dashboard overview
      description: Get system dashboard overview
      operationId: getAdminPortalAnalytics
      parameters: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimit'
        '500':
          $ref: '#/components/responses/Error'
      security:
        - BearerAuth: []
  /api/admin/health:
    get:
      tags:
        - Admin Portal
      summary: Get system analytics
      description: Get system analytics
      operationId: getAdminPortalHealth
      parameters: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimit'
        '500':
          $ref: '#/components/responses/Error'
      security:
        - BearerAuth: []
  /api/admin/audit-logs:
    get:
      tags:
        - Admin Portal
      summary: Get system health status
      description: Get system health status
      operationId: getAdminPortalAudit-logs
      parameters: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimit'
        '500':
          $ref: '#/components/responses/Error'
      security:
        - BearerAuth: []
  /api/admin/users:
    get:
      tags:
        - Admin Portal
      summary: List all users
      description: List all users
      operationId: getAdminPortalUsers
      parameters: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimit'
        '500':
          $ref: '#/components/responses/Error'
      security:
        - BearerAuth: []
    post:
      tags:
        - Admin Portal
      summary: List all users
      description: List all users
      operationId: postAdminPortalUsers
      parameters: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '201':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimit'
        '500':
          $ref: '#/components/responses/Error'
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsercreateUserSchema'
  /api/admin/users/{id}:
    get:
      tags:
        - Admin Portal
      summary: Create a new user
      description: Create a new user
      operationId: getAdminPortalUsers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Id identifier
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimit'
        '500':
          $ref: '#/components/responses/Error'
      security:
        - BearerAuth: []
    put:
      tags:
        - Admin Portal
      summary: Get user by ID
      description: Get user by ID
      operationId: putAdminPortalUsers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Id identifier
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimit'
        '500':
          $ref: '#/components/responses/Error'
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserupdateUserSchema'
    delete:
      tags:
        - Admin Portal
      summary: Update user
      description: Update user
      operationId: deleteAdminPortalUsers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Id identifier
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimit'
        '500':
          $ref: '#/components/responses/Error'
      security:
        - BearerAuth: []
  /api/admin/brands:
    get:
      tags:
        - Admin Portal
      summary: List all brands
      description: List all brands
      operationId: getAdminPortalBrands
      parameters: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimit'
        '500':
          $ref: '#/components/responses/Error'
      security:
        - BearerAuth: []
    post:
      tags:
        - Admin Portal
      summary: List all brands
      description: List all brands
      operationId: postAdminPortalBrands
      parameters: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '201':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimit'
        '500':
          $ref: '#/components/responses/Error'
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BrandcreateBrandSchema'
  /api/admin/brands/{id}:
    get:
      tags:
        - Admin Portal
      summary: Create a new brand
      description: Create a new brand
      operationId: getAdminPortalBrands
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Id identifier
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimit'
        '500':
          $ref: '#/components/responses/Error'
      security:
        - BearerAuth: []
    put:
      tags:
        - Admin Portal
      summary: Update brand
      description: Update brand
      operationId: putAdminPortalBrands
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Id identifier
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimit'
        '500':
          $ref: '#/components/responses/Error'
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BrandupdateBrandSchema'
  /api/admin/brands/{brandId}/members:
    get:
      tags:
        - Admin Portal
      summary: List brand members
      description: List brand members
      operationId: getAdminPortalMembers
      parameters:
        - name: brandId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: BrandId identifier
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimit'
        '500':
          $ref: '#/components/responses/Error'
      security:
        - BearerAuth: []
    post:
      tags:
        - Admin Portal
      summary: Create a new member
      description: Create a new member
      operationId: postAdminPortalMembers
      parameters:
        - name: brandId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: BrandId identifier
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '201':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimit'
        '500':
          $ref: '#/components/responses/Error'
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MembercreateMemberSchema'
  /api/admin/brands/{brandId}/members/{id}:
    get:
      tags:
        - Admin Portal
      summary: Get member by ID
      description: Get member by ID
      operationId: getAdminPortalMembers
      parameters:
        - name: brandId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: BrandId identifier
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Id identifier
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimit'
        '500':
          $ref: '#/components/responses/Error'
      security:
        - BearerAuth: []
    put:
      tags:
        - Admin Portal
      summary: Update member
      description: Update member
      operationId: putAdminPortalMembers
      parameters:
        - name: brandId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: BrandId identifier
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Id identifier
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimit'
        '500':
          $ref: '#/components/responses/Error'
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberupdateMemberSchema'
  /api/admin/brands/{brandId}/missions:
    get:
      tags:
        - Admin Portal
      summary: List brand missions
      description: List brand missions
      operationId: getAdminPortalMissions
      parameters:
        - name: brandId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: BrandId identifier
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimit'
        '500':
          $ref: '#/components/responses/Error'
      security:
        - BearerAuth: []
    post:
      tags:
        - Admin Portal
      summary: Create a new mission
      description: Create a new mission
      operationId: postAdminPortalMissions
      parameters:
        - name: brandId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: BrandId identifier
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '201':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimit'
        '500':
          $ref: '#/components/responses/Error'
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MissioncreateMissionSchema'
  /api/admin/brands/{brandId}/wheels:
    get:
      tags:
        - Admin Portal
      summary: List brand wheels
      description: List brand wheels
      operationId: getAdminPortalWheels
      parameters:
        - name: brandId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: BrandId identifier
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimit'
        '500':
          $ref: '#/components/responses/Error'
      security:
        - BearerAuth: []
    post:
      tags:
        - Admin Portal
      summary: Create a new wheel
      description: Create a new wheel
      operationId: postAdminPortalWheels
      parameters:
        - name: brandId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: BrandId identifier
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '201':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimit'
        '500':
          $ref: '#/components/responses/Error'
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WheelcreateWheelSchema'
  /api/admin/brands/{brandId}/transactions:
    get:
      tags:
        - Admin Portal
      summary: List brand transactions
      description: List brand transactions
      operationId: getAdminPortalTransactions
      parameters:
        - name: brandId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: BrandId identifier
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimit'
        '500':
          $ref: '#/components/responses/Error'
      security:
        - BearerAuth: []
  /api/admin/brands/{brandId}/tiers:
    get:
      tags:
        - Admin Portal
      summary: List brand tiers
      description: List brand tiers
      operationId: getAdminPortalTiers
      parameters:
        - name: brandId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: BrandId identifier
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimit'
        '500':
          $ref: '#/components/responses/Error'
      security:
        - BearerAuth: []
    post:
      tags:
        - Admin Portal
      summary: Create a new tier
      description: Create a new tier
      operationId: postAdminPortalTiers
      parameters:
        - name: brandId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: BrandId identifier
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '201':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimit'
        '500':
          $ref: '#/components/responses/Error'
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TiercreateTierSchema'
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        first_name:
          type: string
        last_name:
          type: string
        role:
          type: string
          enum:
            - super_admin
            - brand_admin
            - brand_manager
            - brand_user
        status:
          type: string
          enum:
            - active
            - inactive
            - suspended
        email_verified:
          type: boolean
        last_login:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Brand:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        slug:
          type: string
        description:
          type: string
        logo_url:
          type: string
          format: uri
        website_url:
          type: string
          format: uri
        contact_email:
          type: string
          format: email
        contact_phone:
          type: string
        status:
          type: string
          enum:
            - active
            - inactive
            - suspended
        settings:
          type: object
        points_currency_name:
          type: string
        points_currency_symbol:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Member:
      type: object
      properties:
        id:
          type: string
          format: uuid
        brand_id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        phone:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        date_of_birth:
          type: string
          format: date
        gender:
          type: string
        status:
          type: string
          enum:
            - active
            - inactive
            - suspended
        points_balance:
          type: integer
        total_points_earned:
          type: integer
        total_points_redeemed:
          type: integer
        tier_level:
          type: string
        join_date:
          type: string
          format: date-time
        last_activity:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Wheel:
      type: object
      properties:
        id:
          type: string
          format: uuid
        brand_id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        status:
          type: string
          enum:
            - active
            - inactive
            - draft
        max_spins_per_day:
          type: integer
        max_spins_per_member:
          type: integer
        cost_per_spin:
          type: integer
        start_date:
          type: string
          format: date-time
        end_date:
          type: string
          format: date-time
        settings:
          type: object
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Mission:
      type: object
      properties:
        id:
          type: string
          format: uuid
        brand_id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        type:
          type: string
          enum:
            - daily
            - weekly
            - monthly
            - one_time
            - recurring
        status:
          type: string
          enum:
            - active
            - inactive
            - draft
            - completed
            - expired
        target_value:
          type: integer
        target_unit:
          type: string
        reward_points:
          type: integer
        reward_description:
          type: string
        start_date:
          type: string
          format: date-time
        end_date:
          type: string
          format: date-time
        max_completions:
          type: integer
        max_completions_per_member:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Transaction:
      type: object
      properties:
        id:
          type: string
          format: uuid
        brand_id:
          type: string
          format: uuid
        member_id:
          type: string
          format: uuid
        type:
          type: string
          enum:
            - earn
            - redeem
            - adjustment
            - bonus
            - penalty
        status:
          type: string
          enum:
            - pending
            - completed
            - failed
            - cancelled
            - reversed
        amount:
          type: integer
        balance_after:
          type: integer
        description:
          type: string
        reference_id:
          type: string
        reference_type:
          type: string
        processed_at:
          type: string
          format: date-time
        expires_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    RegisterRequest:
      type: object
      required:
        - first_name
        - last_name
        - email
        - password
        - confirm_password
      properties:
        first_name:
          type: string
          minLength: 2
          maxLength: 50
        last_name:
          type: string
          minLength: 2
          maxLength: 50
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
          maxLength: 128
        confirm_password:
          type: string
        role:
          type: string
          enum:
            - brand_admin
            - brand_manager
            - brand_user
        brand_id:
          type: string
          format: uuid
        phone:
          type: string
        timezone:
          type: string
          default: UTC
        language:
          type: string
          default: en
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
        remember_me:
          type: boolean
          default: false
    CreateBrandRequest:
      type: object
      required:
        - name
        - slug
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 255
        slug:
          type: string
          minLength: 2
          maxLength: 255
        description:
          type: string
        website_url:
          type: string
          format: uri
        contact_email:
          type: string
          format: email
        contact_phone:
          type: string
        points_currency_name:
          type: string
          default: Points
        points_currency_symbol:
          type: string
          default: pts
        timezone:
          type: string
          default: UTC
        language:
          type: string
          default: en
    AuthResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        tokens:
          type: object
          properties:
            access_token:
              type: string
            refresh_token:
              type: string
            expires_in:
              type: integer
    PaginatedResponse:
      type: object
      properties:
        data:
          type: array
          items: {}
        pagination:
          type: object
          properties:
            page:
              type: integer
            limit:
              type: integer
            total:
              type: integer
            pages:
              type: integer
            hasNext:
              type: boolean
            hasPrev:
              type: boolean
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authentication
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key for brand-specific operations
  responses:
    Success:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              message:
                type: string
              data:
                type: object
              timestamp:
                type: string
                format: date-time
    Error:
      description: Error response
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
              error:
                type: string
              code:
                type: string
              timestamp:
                type: string
                format: date-time
    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: Validation failed
              errors:
                type: array
                items:
                  type: object
                  properties:
                    field:
                      type: string
                    message:
                      type: string
              timestamp:
                type: string
                format: date-time
    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: Authentication required
              code:
                type: string
                example: UNAUTHORIZED
              timestamp:
                type: string
                format: date-time
    Forbidden:
      description: Insufficient permissions
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: Insufficient permissions
              code:
                type: string
                example: FORBIDDEN
              timestamp:
                type: string
                format: date-time
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: Resource not found
              code:
                type: string
                example: NOT_FOUND
              timestamp:
                type: string
                format: date-time
    RateLimit:
      description: Rate limit exceeded
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: Rate limit exceeded
              code:
                type: string
                example: RATE_LIMIT_EXCEEDED
              retryAfter:
                type: integer
                example: 60
              timestamp:
                type: string
                format: date-time
tags:
  - name: Authentication
    description: User authentication and authorization
  - name: Brands
    description: Brand management operations
  - name: Users
    description: User management operations
  - name: Members
    description: Member management and loyalty operations
  - name: Wheels
    description: Wheel configuration and spinning operations
  - name: Missions
    description: Mission and reward management
  - name: Transactions
    description: Points and transaction management
  - name: Admin
    description: Administrative operations
