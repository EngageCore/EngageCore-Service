# Artillery Load Testing Configuration
# Tests API endpoints under various load conditions

config:
  target: 'http://localhost:3000'
  phases:
    # Warm-up phase
    - duration: 60
      arrivalRate: 10
      name: "Warm-up"
    # Ramp-up phase
    - duration: 120
      arrivalRate: 50
      name: "Ramp-up"
    # Sustained load phase
    - duration: 300
      arrivalRate: 100
      name: "Sustained Load"
    # Peak load phase
    - duration: 180
      arrivalRate: 200
      name: "Peak Load"
    # Stress test phase
    - duration: 120
      arrivalRate: 500
      name: "Stress Test"
    # Cool-down phase
    - duration: 60
      arrivalRate: 10
      name: "Cool-down"
  
  # Global configuration
  timeout: 30
  defaults:
    headers:
      'Content-Type': 'application/json'
      'User-Agent': 'Artillery Load Test'
  
  # Performance thresholds
  ensure:
    p95: 2000  # 95th percentile response time should be under 2 seconds
    p99: 5000  # 99th percentile response time should be under 5 seconds
    maxErrorRate: 5  # Error rate should be under 5%

  # Plugins for enhanced reporting
  plugins:
    metrics-by-endpoint:
      useOnlyRequestNames: true

# Test scenarios
scenarios:
  # Authentication flow test
  - name: "Authentication Flow"
    weight: 30
    flow:
      # Register new user
      - post:
          url: "/api/v1/auth/register"
          json:
            email: "test{{ $randomString() }}@loadtest.com"
            password: "LoadTest123!"
            first_name: "Load"
            last_name: "Test"
            brand_id: "550e8400-e29b-41d4-a716-446655440001"
          capture:
            - json: "$.data.token"
              as: "authToken"
            - json: "$.data.refreshToken"
              as: "refreshToken"
            - json: "$.data.user.id"
              as: "userId"
      
      # Login with created user
      - post:
          url: "/api/v1/auth/login"
          json:
            email: "test{{ $randomString() }}@loadtest.com"
            password: "LoadTest123!"
            brand_id: "550e8400-e29b-41d4-a716-446655440001"
          capture:
            - json: "$.data.token"
              as: "loginToken"
      
      # Get user profile
      - get:
          url: "/api/v1/auth/me"
          headers:
            Authorization: "Bearer {{ authToken }}"
      
      # Refresh token
      - post:
          url: "/api/v1/auth/refresh"
          json:
            refreshToken: "{{ refreshToken }}"

  # Brand management test
  - name: "Brand Operations"
    weight: 20
    flow:
      # Get all brands
      - get:
          url: "/api/v1/brands"
          qs:
            page: 1
            limit: 10
      
      # Get specific brand
      - get:
          url: "/api/v1/brands/550e8400-e29b-41d4-a716-446655440001"
      
      # Get brand by slug
      - get:
          url: "/api/v1/brands/slug/test-brand"

  # Member operations test
  - name: "Member Operations"
    weight: 25
    flow:
      # Login first
      - post:
          url: "/api/v1/auth/login"
          json:
            email: "test@loadtest.com"
            password: "LoadTest123!"
            brand_id: "550e8400-e29b-41d4-a716-446655440001"
          capture:
            - json: "$.data.token"
              as: "memberToken"
            - json: "$.data.user.id"
              as: "memberId"
      
      # Get member profile
      - get:
          url: "/api/v1/members/profile"
          headers:
            Authorization: "Bearer {{ memberToken }}"
      
      # Get member transactions
      - get:
          url: "/api/v1/transactions"
          headers:
            Authorization: "Bearer {{ memberToken }}"
          qs:
            page: 1
            limit: 20
      
      # Get member missions
      - get:
          url: "/api/v1/missions/available"
          headers:
            Authorization: "Bearer {{ memberToken }}"

  # Wheel spinning test
  - name: "Wheel Operations"
    weight: 15
    flow:
      # Login first
      - post:
          url: "/api/v1/auth/login"
          json:
            email: "test@loadtest.com"
            password: "LoadTest123!"
            brand_id: "550e8400-e29b-41d4-a716-446655440001"
          capture:
            - json: "$.data.token"
              as: "wheelToken"
      
      # Get wheel configuration
      - get:
          url: "/api/v1/wheels/550e8400-e29b-41d4-a716-446655440031"
          headers:
            Authorization: "Bearer {{ wheelToken }}"
      
      # Spin wheel (with rate limiting consideration)
      - post:
          url: "/api/v1/wheels/550e8400-e29b-41d4-a716-446655440031/spin"
          headers:
            Authorization: "Bearer {{ wheelToken }}"
          ifTrue: "{{ $randomNumber(1, 10) <= 3 }}"  # Only 30% of users spin
      
      # Get spin history
      - get:
          url: "/api/v1/wheels/history"
          headers:
            Authorization: "Bearer {{ wheelToken }}"
          qs:
            page: 1
            limit: 10

  # Health check and monitoring
  - name: "Health Checks"
    weight: 10
    flow:
      # Health check endpoint
      - get:
          url: "/health"
      
      # API status
      - get:
          url: "/api/v1/status"

# Custom functions for dynamic data
functions:
  randomString:
    - "{{ $randomString() }}"
  randomEmail:
    - "test{{ $randomNumber(1, 10000) }}@loadtest.com"
  randomBrandId:
    - "550e8400-e29b-41d4-a716-446655440001"

# Before and after hooks
before:
  flow:
    # Setup test data if needed
    - log: "Starting load test..."

after:
  flow:
    # Cleanup if needed
    - log: "Load test completed."